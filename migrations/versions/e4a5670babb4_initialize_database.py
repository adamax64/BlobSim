"""Initialize database

Revision ID: e4a5670babb4
Revises:
Create Date: 2025-01-04 15:33:44.172229

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e4a5670babb4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Ensure BCS schema exists outside of transaction
    conn = op.get_bind()
    conn.execute(sa.text('CREATE SCHEMA IF NOT EXISTS "BCS"'))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('leagues',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('level', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('level'),
                    schema="BCS"
                    )
    op.create_table('sim_data',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sim_time', sa.BigInteger(), nullable=True),
                    sa.Column('factory_progress', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('email', sa.String(), nullable=True),
                    sa.Column('password', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    op.create_table('blobs',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('strength', sa.Double(), nullable=True),
                    sa.Column('learning', sa.Double(), nullable=True),
                    sa.Column('integrity', sa.Integer(), nullable=True),
                    sa.Column('born', sa.BigInteger(), nullable=True),
                    sa.Column('terminated', sa.BigInteger(), nullable=True),
                    sa.Column('debut', sa.Integer(), nullable=True),
                    sa.Column('contract', sa.Integer(), nullable=True),
                    sa.Column('money', sa.Integer(), nullable=True),
                    sa.Column('points', sa.Integer(), nullable=True),
                    sa.Column('bronze_medals', sa.Integer(), nullable=True),
                    sa.Column('silver_medals', sa.Integer(), nullable=True),
                    sa.Column('gold_medals', sa.Integer(), nullable=True),
                    sa.Column('season_victories', sa.Integer(), nullable=True),
                    sa.Column('bronze_trophies', sa.Integer(), nullable=True),
                    sa.Column('silver_trophies', sa.Integer(), nullable=True),
                    sa.Column('gold_trophies', sa.Integer(), nullable=True),
                    sa.Column('championships', sa.Integer(), nullable=True),
                    sa.Column('grandmasters', sa.Integer(), nullable=True),
                    sa.Column('league_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['league_id'], ['BCS.leagues.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    op.create_table('calendar',
                    sa.Column('date', sa.BigInteger(), nullable=False),
                    sa.Column('league_id', sa.Integer(), nullable=True),
                    sa.Column('concluded', sa.Boolean(), nullable=True),
                    sa.Column('event_type', sa.Enum(
                        'QUARTERED_ONE_SHOT_SCORING',
                        'QUARTERED_TWO_SHOT_SCORING',
                        'ENDURANCE_RACE',
                        name='eventtype',
                        schema='BCS'
                    ), nullable=True),
                    sa.ForeignKeyConstraint(['league_id'], ['BCS.leagues.id'], ),
                    sa.PrimaryKeyConstraint('date'),
                    schema="BCS"
                    )
    op.create_table('events',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('league_id', sa.Integer(), nullable=True),
                    sa.Column('date', sa.BigInteger(), nullable=True),
                    sa.Column('season', sa.Integer(), nullable=True),
                    sa.Column('round', sa.Integer(), nullable=True),
                    sa.Column('type', sa.Enum(name='eventtype', schema='BCS', create_type=False, drop_type=False), nullable=True),
                    sa.ForeignKeyConstraint(['league_id'], ['BCS.leagues.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    op.create_table('actions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('event_id', sa.Integer(), nullable=True),
                    sa.Column('tick', sa.Integer(), nullable=True),
                    sa.Column('blob_id', sa.Integer(), nullable=True),
                    sa.Column('score', sa.Double(), nullable=True),
                    sa.ForeignKeyConstraint(['blob_id'], ['BCS.blobs.id'], ),
                    sa.ForeignKeyConstraint(['event_id'], ['BCS.events.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    op.create_table('results',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('event_id', sa.Integer(), nullable=True),
                    sa.Column('blob_id', sa.Integer(), nullable=True),
                    sa.Column('position', sa.Integer(), nullable=True),
                    sa.Column('points', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['blob_id'], ['BCS.blobs.id'], ),
                    sa.ForeignKeyConstraint(['event_id'], ['BCS.events.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    schema="BCS"
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('results', schema="BCS")
    op.drop_table('actions', schema="BCS")
    op.drop_table('events', schema="BCS")
    op.drop_table('calendar', schema="BCS")
    op.drop_table('blobs', schema="BCS")
    op.drop_table('users', schema="BCS")
    op.drop_table('sim_data', schema="BCS")
    op.drop_table('leagues', schema="BCS")
    # ### end Alembic commands ###
